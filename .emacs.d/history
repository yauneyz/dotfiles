;; -*- mode: emacs-lisp; coding: utf-8-unix -*-
;; Minibuffer history file, automatically generated by ‘savehist’.

(setq savehist-minibuffer-history-variables '(command-history buffer-name-history shell-command-history woman-topic-history counsel-ibuffer-history counsel-git-grep-history swiper-history counsel-M-x-history ivy-history minibuffer-history tmm--history cider-minibuffer-history yes-or-no-p-history read-expression-history evil-ex-history file-name-history extended-command-history))
(setq command-history '((evil-record-macro 113) (evil-record-macro 103) (evil-change 90 101 'inclusive) (evil-change 41 48 'inclusive) (evil-delete 2 3 'line) (evil-delete 3 4 'line) (evil-delete 4 5 'line) (evil-delete 5 6 'line) (evil-record-macro 106) (evil-shift-left 160 197) (evil-change 43 87 'line) (evil-change 55 97 'line) (evil-change 43 81 'line) (evil-replace 63 64 'exclusive 120) (evil-replace 63 64 'exclusive 121) (evil-delete 79 100 'line) (evil-record-macro 106) (evil-record-macro 106) (evil-change 65 69 'inclusive) (evil-change 56 61 'inclusive) (evil-change 37 45 'line) (evil-change 22 30 'inclusive) (evil-change 111 156 'line) (evil-change 30 43 'line) (evil-replace 132 133 'exclusive 41)))
(setq counsel-ibuffer-history '(#(" *   *cider-repl clo...     11992 REPL[clj]        (nrepl-connection open)" 0 74 (ivy-index 3 idx 3)) #(" *   *cider-repl clo...     11375 REPL[clj]        (nrepl-connection open)" 0 74 (ivy-index 6 idx 6)) #("     init.el                11489 ELisp/d          ~/.emacs.d/init.el" 0 69 (ivy-index 1 idx 1))))
(setq swiper-history '(#("paredit" 0 7 (ivy-index 9)) #("   (add-hook 'scheme-mode-hook #'enable-paredit-mode)" 0 1 (swiper-line-number 115 display "115 ") 1 3 (fontified t) 3 4 (fontified t face (rainbow-delimiters-depth-2-face)) 4 52 (fontified t) 52 53 (fontified t face (rainbow-delimiters-depth-2-face))) #(" (add-hook 'clojure-mode-hook #'paredit-mode)" 0 1 (swiper-line-number 126 display "126 ") 1 2 (fontified t face (rainbow-delimiters-depth-1-face)) 2 44 (fontified t) 44 45 (fontified t face (rainbow-delimiters-depth-1-face))) #("   (add-hook 'clojure-mode-hook #'paredit-mode)" 0 1 (swiper-line-number 287 display "287 ") 1 3 (fontified t) 3 4 (fontified t face (rainbow-delimiters-depth-2-face)) 4 37 (fontified t) 37 46 (fontified t) 46 47 (fontified t face (rainbow-delimiters-depth-2-face))) #("    '(python-mode evil-magit magit counsel-projectile all-the-icons helpful counsel ivy-rich which-key rainbow-delimiters doom-themes flycheck company company-lsp company-mode dap-mode helm-lsp lsp-ivy lsp-treemacs lsp-ui lsp-mode quelpa editorconfig copilot evil-nerd-commenter paredit cider evil)))" 0 1 (swiper-line-number 382 display "382 ") 1 5 (fontified t) 5 6 (fontified t face (rainbow-delimiters-depth-3-face)) 6 297 (fontified t) 297 298 (fontified t face (rainbow-delimiters-depth-3-face)) 298 299 (fontified t face (rainbow-delimiters-depth-2-face)) 299 300 (fontified t face (rainbow-delimiters-depth-1-face))) #("cider" 0 5 (ivy-index 6)) #(" ;; Cider" 0 1 (swiper-line-number 294 display "294 ") 1 4 (fontified t face font-lock-comment-delimiter-face) 4 9 (fontified t face font-lock-comment-face)) #("treema" 0 6 (ivy-index 3)) #(" (use-package treemacs" 0 1 (swiper-line-number 232 display "232 ") 1 2 (fontified t face (rainbow-delimiters-depth-1-face)) 2 13 (fontified t face font-lock-keyword-face) 13 14 (fontified t) 14 22 (fontified t face font-lock-constant-face)) #("display" 0 7 (ivy-index 2)) #("  ;; (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))" 0 1 (swiper-line-number 228 display "228 ") 1 2 (fontified t) 2 5 (fontified t face font-lock-comment-delimiter-face) 5 87 (fontified t face font-lock-comment-face)) #("compan" 0 6 (ivy-index 0)) #(" ;; Company Mode - configured to use LSP" 0 1 (swiper-line-number 234 display "234 ") 1 4 (fontified t face font-lock-comment-delimiter-face) 4 10 (fontified t face font-lock-comment-face) 10 33 (fontified t face font-lock-comment-face) 33 40 (fontified t face font-lock-comment-face)) #("company" 0 7 (ivy-index 0)) #(" ;; Company Mode" 0 1 (swiper-line-number 140 display "140 ") 1 4 (fontified t face font-lock-comment-delimiter-face) 4 16 (fontified t face font-lock-comment-face)) "Ciderj" #("evil-coll" 0 9 (ivy-index 2)) #("   (evil-collection-init))" 0 1 (swiper-line-number 87 display "87  ") 1 3 (fontified t) 3 4 (fontified t face (rainbow-delimiters-depth-2-face)) 4 24 (fontified t) 24 25 (fontified t face (rainbow-delimiters-depth-2-face)) 25 26 (fontified t face (rainbow-delimiters-depth-1-face))) #("Proj" 0 4 (ivy-index 1)) #(" ;; Counsel Projectile" 0 1 (swiper-line-number 239 display "239 ") 1 4 (fontified t face font-lock-comment-delimiter-face) 4 11 (fontified t face font-lock-comment-face) 11 22 (fontified t face font-lock-comment-face)) #("ivy" 0 3 (ivy-index 21)) #("    '(all-the-icons helpful counsel ivy-rich which-key rainbow-delimiters doom-themes flycheck company company-lsp company-mode dap-mode helm-lsp lsp-ivy lsp-treemacs lsp-ui lsp-mode quelpa editorconfig copilot evil-nerd-commenter paredit cider evil)))" 0 1 (swiper-line-number 293 display "293 ") 1 5 (fontified t) 5 6 (fontified t face (rainbow-delimiters-depth-3-face)) 6 249 (fontified t) 249 250 (fontified t face (rainbow-delimiters-depth-3-face)) 250 251 (fontified t face (rainbow-delimiters-depth-2-face)) 251 252 (fontified t face (rainbow-delimiters-depth-1-face))) #("<leader" 0 7 (ivy-index 1)) #(" (global-set-key (kbd \"<leader>SPC\") 'counsel-switch-buffer)" 0 1 (swiper-line-number 286 display "286 ") 1 2 (fontified t face (rainbow-delimiters-depth-1-face)) 2 17 (fontified t) 17 18 (fontified t face (rainbow-delimiters-depth-2-face)) 18 22 (fontified t) 22 24 (fontified t face font-lock-string-face) 24 35 (fontified t face font-lock-string-face) 35 36 (fontified t face (rainbow-delimiters-depth-2-face)) 36 59 (fontified t) 59 60 (fontified t face (rainbow-delimiters-depth-1-face))) #("C-c p" 0 5 (ivy-index 0))))
(setq counsel-M-x-history '(#("checkparens" 0 11 (ivy-index 0)) "check-parens" #("checkpare" 0 9 (ivy-index 0)) "check-parens" #("loadtheme" 0 9 (ivy-index 1)) "load-theme" #("counsel-M" 0 9 (ivy-index 0)) "counsel-M-x" "check-parens" "check-parens" "check-parens" #("commandlogmode" 0 14 (ivy-index 0)) "global-command-log-mode" #("togglecomma" 0 11 (ivy-index 0)) "clm/toggle-command-log-buffer" #("togglecommand" 0 13 (ivy-index 0)) "clm/toggle-command-log-buffer" "global-command-log-mode" #("install-fon" 0 11 (ivy-index 0)) "nerd-icons-install-fonts" #("packainstfil" 0 12 (ivy-index 0)) "package-install-file" #("packageinsfile" 0 14 (ivy-index 0)) "package-install-file" #("packageinstallfil" 0 17 (ivy-index 0))))
(setq ivy-history '(#("scratch.clj~" 0 12 (ivy-index 1)) #("~/development/clojure/scratch/" 0 30 (ivy-index 0)) #("#project.clj#" 0 13 (ivy-index 0)) #("doom-material-dark" 0 18 (ivy-index 30)) #("pbcopy" 0 6 (ivy-index 0)) #("commandp" 0 8 (ivy-index 0)) #("ini" 0 3 (ivy-index 0)) "init.el" #("flycheck-list-errors" 0 20 (ivy-index 0)) #("ivy-switch-buffer-kill" 0 22 (ivy-index 13059)) #("evil-want-keybinding" 0 20 (ivy-index 0)) #("evil-want-integration" 0 21 (ivy-index 0)) #("evil-global-set-key" 0 19 (ivy-index 0)) #("use-package" 0 11 (ivy-index 14716)) #("doom-gruvbox" 0 12 (ivy-index 1)) #("doom-dracula" 0 12 (ivy-index 13))))
(setq minibuffer-history '("ivy"))
(setq tmm--history '("h==>Help" "l==>Emacs-Lisp" "t==>Tools" "E==>ElScreen" "b==>Buffers" "o==>Options" "e==>Edit" "f==>File"))
(setq cider-minibuffer-history '("x" "if"))
(setq yes-or-no-p-history '("yes" "tes" "yes" "no" "yes"))
(setq read-expression-history '("(load-file user-init-file)" "major-mode"))
(setq evil-ex-history '(#("q" 0 1 (ex-index 1)) #("w" 0 1 (ex-index 1)) #("q" 0 1 (ex-index 1)) #("'<,'>s/x/y" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10)) #("w" 0 1 (ex-index 1)) #("q" 0 1 (ex-index 1)) #("w" 0 1 (ex-index 1)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("q" 0 1 (ex-index 1)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("q" 0 1 (ex-index 1)) #("w" 0 1 (ex-index 1)) #("q" 0 1 (ex-index 1)) #("w" 0 1 (ex-index 1)) #("q!" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("q" 0 1 (ex-index 1)) #("w" 0 1 (ex-index 1)) #("w!" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("w!" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("q" 0 1 (ex-index 1)) #("w" 0 1 (ex-index 1))))
(setq file-name-history '("~/.emacs.d/init.el" #("/Users/yauneyz/Downloads/exec-path-from-shell.el" 0 48 (ivy-index 0)) "~/.emacs.d/init.el" #("/Users/" 0 1 (ivy-index 0) 1 7 (ivy-index 0 dirp t)) "~/.emacs.d/init.el" "~/development/clojure/guestbook/project.clj" "~/.emacs.d/init.el" "~/development/clojure/clojure-emacs-cider-intro/code/clj/cider-tour/project.clj" "~/.emacs.d/init.el" "~/development/clojure/clojure-emacs-cider-intro/code/clj/cider-tour/project.clj" "~/.emacs.d/elpa/cider-20240220.720/cider.el" "~/.emacs.d/init.el"))
(setq extended-command-history '(#("flycheck-list-errors" 0 20 (ivy-index 0)) #("rainbow-delimiters-mode" 0 23 (ivy-index 0)) #("shell" 0 5 (ivy-index 10)) #("load-theme" 0 10 (ivy-index 0)) #("nerd-icons-install-fonts" 0 24 (ivy-index 0)) #("ivy-mode" 0 8 (ivy-index 0)) "eval-buffer" "locate-library" "package-install" "check-parens" "projectile-find-file" "lsp-find-definition" "lsp" "check-parens" "package-refresh-contents" "cider-jack-in" "copilot-login" "copilot-install-server" "copilot-login" "testcover-start" "describe-variable"))
(setq evil-jumps-history '((62 "/Users/yauneyz/development/clojure/scratch/scratch.clj~") (14 #1="/Users/yauneyz/development/clojure/scratch/scratch.clj~") (14 #1#) (14 #1#) (14 #1#) (14 #1#) (14 #1#) (155 #1#) (14 #1#) (14 #1#) (121 #1#) (14 #1#) (14 #1#) (14 #1#) (14 #1#) (280 #1#) (1 "/Users/yauneyz/development/clojure/scratch/#project.clj#") (1 "/Users/yauneyz/development/clojure/scratch/#project.clj#") (10277 #2="/Users/yauneyz/.emacs.d/init.el") (5731 #2#) (719 #2#) (10277 #2#) (4989 "/Users/yauneyz/.emacs.d/init.el") (11004 #3="/Users/yauneyz/.emacs.d/init.el") (10596 #3#) (10530 #3#) (10464 #3#) (10353 #3#) (10278 #3#) (10205 #3#) (10131 #3#) (10016 #3#) (9950 #3#) (9883 #3#) (9815 #3#) (9751 #3#) (9688 #3#) (9625 #3#) (7194 #3#) (4285 #3#) (10898 #3#) (9427 #3#) (4207 #3#) (4192 #3#) (4143 #3#) (4091 #3#) (10898 #3#) (9427 #3#) (4207 #3#) (4192 #3#) (4181 #3#) (4902 #4="/Users/yauneyz/.emacs.d/init.el") (4917 #4#) (4902 #4#) (10137 #4#) (4917 #4#) (4902 #4#) (177 #4#) (11607 "/Users/yauneyz/.emacs.d/init.el") (180 #5="/Users/yauneyz/.emacs.d/init.el") (176 #5#) (10761 #5#) (429 #5#) (2857 "/Users/yauneyz/.emacs.d/init.el") (9354 #6="/Users/yauneyz/.emacs.d/init.el") (2736 #6#) (9354 #6#) (2805 #6#) (10 #6#) (10788 #6#) (11175 #7="/Users/yauneyz/.emacs.d/init.el") (3232 #7#) (10964 #7#) (10855 #7#) (10720 #7#) (10593 #7#) (3356 #7#) (11175 #8="/Users/yauneyz/.emacs.d/init.el") (3354 #8#) (3456 #8#) (3499 #8#) (3544 #8#) (8084 #8#) (10515 #8#) (8084 #8#) (3544 #8#) (7981 #8#) (10535 #8#) (8084 #8#) (6747 #8#) (11177 #8#) (10927 #8#) (3559 #8#) (8084 #8#) (10394 #8#) (8304 #8#) (6687 #8#) (1338 #8#) (6579 #8#)))
(setq projectile-project-command-history '#s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data ()))
